const $btnKick = document.getElementById('btn-kick');
const $logs = document.getElementById('logs');

// —Å—Ç–≤–æ—Ä—é—î–º–æ –¥—Ä—É–≥—É –∫–Ω–æ–ø–∫—É
const $btnStrong = document.createElement('button');
$btnStrong.innerText = 'Thunder Strike';
$btnStrong.classList.add('button');
document.querySelector('.control').appendChild($btnStrong);

// === –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–∫–µ–º–æ–Ω–∞ ===
function createPokemon({ name, defaultHP, elHP, elProgressbar }) {
  let damageHP = defaultHP;

  const renderHP = () => {
    elHP.innerText = `${damageHP} / ${defaultHP}`;
    elProgressbar.style.width = `${damageHP}%`;
    elProgressbar.style.backgroundColor =
      damageHP < defaultHP * 0.3 ? 'red' :
      damageHP < defaultHP * 0.6 ? 'yellow' : 'lime';
  };

  const changeHP = (count, attacker) => {
    const prevHP = damageHP;
    damageHP = Math.max(damageHP - count, 0);
    renderHP();

    const logText = generateLog(attacker, name, count, damageHP);
    addLog(logText);

    if (damageHP === 0) {
      addLog(`üíÄ ${name} –≤–∏–±—É–≤ —ñ–∑ –±–æ—é!`);
      disableButtons();
    }
  };

  const disableButtons = () => {
    $btnKick.disabled = true;
    $btnStrong.disabled = true;
  };

  return { name, renderHP, changeHP, disableButtons };
}

// === –ì–µ—Ä–æ–π —ñ –≤–æ—Ä–æ–≥–∏ ===
const character = createPokemon({
  name: 'Pikachu',
  defaultHP: 100,
  elHP: document.getElementById('health-character'),
  elProgressbar: document.getElementById('progressbar-character'),
});

const enemy1 = createPokemon({
  name: 'Charmander',
  defaultHP: 100,
  elHP: document.getElementById('health-enemy'),
  elProgressbar: document.getElementById('progressbar-enemy'),
});

// === –õ–æ–≥—ñ–∫–∞ ===
const random = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

function generateLog(firstPerson, secondPerson, damage, remainingHP) {
  const text = logs[random(0, logs.length - 1)]
    .replace('[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ1]', firstPerson)
    .replace('[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ2]', secondPerson);

  return `üåÄ ${text}<br>üí• –í—Ç—Ä–∞—Ç–∞: ${damage} HP | ‚ù§Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${remainingHP} HP`;
}

function addLog(text) {
  const p = document.createElement('p');
  p.innerHTML = text;
  p.style.borderBottom = '1px solid #ccc';
  p.style.padding = '5px';
  p.style.margin = '5px 0';
  // –Ω–æ–≤–∏–π –ª–æ–≥ –∑–≤–µ—Ä—Ö—É
  $logs.prepend(p);
}

function init() {
  character.renderHP();
  enemy1.renderHP();
}

function playerAttack(maxDamage) {
  const damage = random(10, maxDamage);
  enemy1.changeHP(damage, character.name);

  // –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤–æ—Ä–æ–≥–∞
  setTimeout(() => {
    const enemyDamage = random(5, 20);
    character.changeHP(enemyDamage, enemy1.name);
  }, 700);
}

$btnKick.addEventListener('click', () => playerAttack(20));
$btnStrong.addEventListener('click', () => playerAttack(35));

init();
